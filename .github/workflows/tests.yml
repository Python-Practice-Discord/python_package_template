name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Test
    strategy:
      matrix:
        os:
          - 'ubuntu-latest'
          - 'macos-latest'
          - 'windows-latest'
        python-version:
          - '3.6'
          - '3.7'
          - '3.8'
          - '3.9'
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:

      ##################### START Standard Setup for Poetry #####################
      - name: Checkout code
        uses: actions/checkout@v2.3.4

      - name: Sets up the specified python version
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{matrix.python-version}}

      # Creates a cache for poetry if it does not already exist
      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v2.1.6
        with:
          path: ~/.poetry
          key: ${{ matrix.os }}-poetry

      # Installs poetry IF the cache-poetry does not hit.
      - name: Install latest version of Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py |
          python -

      # Adds poetry to the path so it can be accessed
      - name: Add Poetry to $PATH
        run: |
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      # Checks to see if the pyproject.toml file is valid
      - name: Check pyproject.toml validity
        run: poetry check -n

      # Caches the poetry virtual env in the .venv folder based on the os that is being used and
      #   the hash of the poetry.lock file.
      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v2.1.6
        with:
          path: ${{github.workspace}}/.venv
          key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      # Installs the python deps using poetry if the poetry.lock file changed.
      - name: Install deps
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: poetry install -n --remove-untracked

      ##################### END Standard Setup for Poetry #####################


      # runs pytest via poetry inside of the poetry .venv file
      - name: Run tests
        run: poetry run pytest -v

      # Ensures the package can actually be built
      - name: Build
        run: poetry build -n

